Consideramos que o grafo Ã© undirected! - um caminho pode ser corrido para qualquer um dos sentidos..
Time is not very good when need edges that exist -> requires O(n)



# TIME EXECUTION GRAPH:

```
    Graph g = Graph(v);
    g.setEdgeDistance(0, 200, 10.0, 1);
    g.setEdgeDistance(0, 800, 50, 0);
    g.setEdgeDistance(1, 2, 30, 1);
    g.setEdgeDistance(400, 900, 40, 0);
    g.setEdgeDistance(899, 967, 24, 1);


    auto start = std::chrono::system_clock::now();

    for(int i = 0; i < 100000; i++){
        g.getDistance(0, 200);
        g.getDistance(800,0);
        g.getDistance(400, 900);
        g.getDistance(899, 967);
    }

    auto end = std::chrono::system_clock::now();

    auto diff = end - start;

    std::cout << "\nTIME DURATION: " << std::chrono::duration<double, std::nano>(diff).count() << " ns";
    std::cout << "\nTIME DURATION: " << std::chrono::duration<double, std::milli>(diff).count() << " ms";

```



Para v = 4: 100.000 execucoes:
TIME DURATION: 3.63e+06 ns
TIME DURATION: 3.63 ms

Para v = 1000: 100.000 execucoes:
TIME DURATION: 3.755e+06 ns
TIME DURATION: 3.755 ms

Para v = 1000000: 1000000 execucoes:



It may be important to run several processes, to build and debug yourself, you can
follow this:

- mkdir build-dir
go inside it

- cd build-dir
then run cmake and point to the parent directory

- cmake ..
and finally run make

- make
and the program

- ./DAProject2
